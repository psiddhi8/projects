package filter;

import imagemodel.IImage;
import imagemodel.IPixel;
import imagemodel.Image;
import imagemodel.Pixel;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;

/**
 * This class tests the sub-class of {@link AFilter}, {@link Sharpen}, and extends
 * {@link AFilterTest}. This class tests the methods that create an object that is an
 * {@link AFilter} and an {@link IModifier}. It also tests the modify and toString method on this
 * Sharpen object.
 */
public class SharpenTest extends AFilterTest {
  List<IPixel> pixels;
  List<IPixel> pixelsSharpened;
  IImage img;
  double[][] kernelEvenRows;
  double[][] kernelEvenColumns;

  @Before
  public void initData() {
    pixels = new ArrayList<>();
    pixels.add(new Pixel(0, 0, 100, 100, 100));
    pixels.add(new Pixel(0, 1, 100, 100, 100));
    pixels.add(new Pixel(0, 2, 100, 100, 100));
    pixels.add(new Pixel(0, 3, 100, 100, 100));
    pixels.add(new Pixel(0, 4, 100, 100, 100));
    pixels.add(new Pixel(1, 0, 100, 100, 100));
    pixels.add(new Pixel(1, 1, 100, 100, 100));
    pixels.add(new Pixel(1, 2, 100, 100, 100));
    pixels.add(new Pixel(1, 3, 100, 100, 100));
    pixels.add(new Pixel(1, 4, 100, 100, 100));
    pixels.add(new Pixel(2, 0, 100, 100, 100));
    pixels.add(new Pixel(2, 1, 100, 100, 100));
    pixels.add(new Pixel(2, 2, 100, 100, 100));
    pixels.add(new Pixel(2, 3, 100, 100, 100));
    pixels.add(new Pixel(2, 4, 100, 100, 100));
    pixels.add(new Pixel(3, 0, 100, 100, 100));
    pixels.add(new Pixel(3, 1, 100, 100, 100));
    pixels.add(new Pixel(3, 2, 100, 100, 100));
    pixels.add(new Pixel(3, 3, 100, 100, 100));
    pixels.add(new Pixel(3, 4, 100, 100, 100));
    pixels.add(new Pixel(4, 0, 100, 100, 100));
    pixels.add(new Pixel(4, 1, 100, 100, 100));
    pixels.add(new Pixel(4, 2, 100, 100, 100));
    pixels.add(new Pixel(4, 3, 100, 100, 100));
    pixels.add(new Pixel(4, 4, 100, 100, 100));

    pixelsSharpened = new ArrayList<>();
    pixelsSharpened.add(new Pixel(0, 0, 112, 112, 112));
    pixelsSharpened.add(new Pixel(0, 1, 150, 150, 150));
    pixelsSharpened.add(new Pixel(0, 2, 112, 112, 112));
    pixelsSharpened.add(new Pixel(0, 3, 150, 150, 150));
    pixelsSharpened.add(new Pixel(0, 4, 112, 112, 112));
    pixelsSharpened.add(new Pixel(1, 0, 150, 150, 150));
    pixelsSharpened.add(new Pixel(1, 1, 212, 212, 212));
    pixelsSharpened.add(new Pixel(1, 2, 162, 162, 162));
    pixelsSharpened.add(new Pixel(1, 3, 212, 212, 212));
    pixelsSharpened.add(new Pixel(1, 4, 150, 150, 150));
    pixelsSharpened.add(new Pixel(2, 0, 112, 112, 112));
    pixelsSharpened.add(new Pixel(2, 1, 162, 162, 162));
    pixelsSharpened.add(new Pixel(2, 2, 100, 100, 100));
    pixelsSharpened.add(new Pixel(2, 3, 162, 162, 162));
    pixelsSharpened.add(new Pixel(2, 4, 112, 112, 112));
    pixelsSharpened.add(new Pixel(3, 0, 150, 150, 150));
    pixelsSharpened.add(new Pixel(3, 1, 212, 212, 212));
    pixelsSharpened.add(new Pixel(3, 2, 162, 162, 162));
    pixelsSharpened.add(new Pixel(3, 3, 212, 212, 212));
    pixelsSharpened.add(new Pixel(3, 4, 150, 150, 150));
    pixelsSharpened.add(new Pixel(4, 0, 112, 112, 112));
    pixelsSharpened.add(new Pixel(4, 1, 150, 150, 150));
    pixelsSharpened.add(new Pixel(4, 2, 112, 112, 112));
    pixelsSharpened.add(new Pixel(4, 3, 150, 150, 150));
    pixelsSharpened.add(new Pixel(4, 4, 112, 112, 112));

    img = new Image(pixels, 5, 5, 255);

    kernelEvenRows = new double[][]{
            {-1.0 / 8.0, -1.0 / 8.0, -1.0 / 8.0, -1.0 / 8.0, -1.0 / 8.0},
            {-1.0 / 8.0, 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0, -1.0 / 8.0},
            {-1.0 / 8.0, 1.0 / 4.0, 1, 1.0 / 4.0, -1.0 / 8.0},
            {-1.0 / 8.0, 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0, -1.0 / 8.0}
    };

    kernelEvenColumns = new double[][]{
            {-1.0 / 8.0, -1.0 / 8.0, -1.0 / 8.0, -1.0 / 8.0},
            {-1.0 / 8.0, 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0},
            {-1.0 / 8.0, 1.0 / 4.0, 1.0, 1.0 / 4.0},
            {-1.0 / 8.0, 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0},
            {-1.0 / 8.0, -1.0 / 8.0, -1.0 / 8.0, -1.0 / 8.0}
    };
  }

  @Override
  public IModifier objectCreator() {
    return new Sharpen();
  }

  @Override
  public AFilter objectFilterCreator() {
    return new Sharpen();
  }

  @Test(expected = IllegalArgumentException.class)
  public void testInvalidKernelWithEvenRows() {
    new Sharpen(kernelEvenRows);
  }

  @Test(expected = IllegalArgumentException.class)
  public void testInvalidKernelWithEvenColumns() {
    new Sharpen(kernelEvenColumns);
  }

  @Test
  public void testModifier() {
    assertEquals(pixelsSharpened.toString(), this.objectCreator().modify(img).toString());
  }

  @Test
  public void testToString() {
    assertEquals("sharpen", this.objectFilterCreator().toString());
  }
}